" Set mapleader to comma
let mapleader = ","

" Load up Pathogen
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

if has("autocmd")
	autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Get rid of the space-wasting toolbar in MacVim
if has("gui_running")
	set guioptions=-t
endif

" Main settings
set nocompatible
set scrolloff=4

set number
set ruler
syntax on

" Set encoding
set encoding=utf-8

" Core Whitespace
set nowrap
set noexpandtab
set shiftwidth=2
set tabstop=2
set autoindent

" Custom tabbing - I can't do this until I can set YAML separately.
"autocmd User Rails set sw=4 sts=4 noet
"autocmd FileType ruby setlocal ts=2 sts=2 sw=2 noexpandtab

" Vidualize Leading and Trailing Whitespace
"set list listchars=tab:➜\ ,trail:·
if has("autocmd")
	autocmd BufNewFile,BufReadPost,FilterReadPost,FileReadPost,Syntax * SpaceHi
	au FileType help NoSpaceHi
endif

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Press escape to clear search
" http://stackoverflow.com/questions/657447/vim-clear-last-search-highlighting
nnoremap <silent><esc><esc> :nohlsearch<CR>

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" NERDTree configuration
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" Command-T configuration
let g:CommandTMaxHeight=20

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>

" Gundo configuration
nmap <F5> :GundoToggle<CR>
imap <F5> <ESC>:GundoToggle<CR>

" Remember last location in file
if has("autocmd")
	au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
		\| exe "normal g'\"" | endif
endif

function! s:setupWrapping()
	set wrap
	set wrapmargin=2
	set textwidth=100
endfunction

function! s:setupMarkup()
	call s:setupWrapping()
	map <buffer> <Leader>p :Hammer<CR>
endfunction

if has("autocmd")
	" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
	au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}		 set ft=ruby

	" md, markdown, and mk are markdown and define buffer-local preview
	au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

	" add json syntax highlighting
	au BufNewFile,BufRead *.json set ft=javascript

	au BufRead,BufNewFile *.txt call s:setupWrapping()
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

autocmd FileType ruby setlocal ts=2 sts=2 sw=2 noexpandtab

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>te
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
nmap <C-k> [e
nmap <C-j> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv
vmap <C-k> [egv
vmap <C-j> ]egv

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" gist-vim defaults
if has("mac")
	let g:gist_clip_command = 'pbcopy'
elseif has("unix")
	let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

" Use modeline overrides
set modeline
set modelines=10

" Default color scheme
if has("gui_running")
	"set background=dark
	"color solarized
	color desert
else
	color ir_black
endif

" Set column marker for long lines. I like 100 cols.
highlight OverLength ctermbg=darkgray ctermfg=white guibg=#2d2d2d
highlight ColorColumn ctermbg=darkgray ctermfg=white guibg=#2d2d2d
match OverLength /\%>101v.\+/
set colorcolumn=101

" Line Highlighting
if has("gui_running")
	set cursorline
	highlight CursorLine guibg=#3d3d3d
endif

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" MacVIM shift+arrow-keys behavior (required in .vimrc)
" http://enethrie.com/2011/06/16/use-set-selectmode-to-disable-select-mode-in-vim-2
" Comment out the next line and uncomment the following in order to act like
" Vim instead of Mac OS
let macvim_hig_shift_movement = 1
" set selectmode=

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Show (partial) command in the status line
set showcmd

if has("gui_running")
	" Automatically resize splits when resizing MacVim window
	autocmd VimResized * wincmd =
endif

